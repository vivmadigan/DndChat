@model JoinViewModel
@{
    ViewData["Title"] = "Chat";
}
@* 
  The outer container renders server-side (Razor) on GET/POST.
  We embed two flags as data-* attributes so the client JS can
  decide whether to start SignalR (no DB/session needed).
  - data-joined: "true"/"false" from Model.Joined
  - data-username: the name the user entered
  chat.js reads these via root.dataset.joined / root.dataset.username.
*@
<div class="container py-4 text-center"
     id="root"
     data-joined="@Model.Joined.ToString().ToLower()"
     data-username="@Model.Username">

    <h1 class="display-4">Welcome to DndChat!</h1>
    <p>Enter a username to start.</p>

    @* 
      JOIN FORM (server-validated MVC form)
      - Posts back to the same action (Index [HttpPost])
      - Anti-forgery token protects against CSRF
      - Bootstrap classes handle layout; custom width comes from site.css
    *@
    <div class="card mx-auto mb-3 chat-card">
        <div class="card-body">
            <form asp-action="Index" method="post" class="row g-2 justify-content-center">
                @Html.AntiForgeryToken()
                <div class="col-8">
                    <input asp-for="Username"
                           class="form-control"
                           placeholder="Username (min 3 chars)"
                           minlength="3"
                           autocomplete="off" />
                </div>
                <div class="col-4 d-grid">
                    <button type="submit" class="btn btn-primary">Start</button>
                </div>
            </form>
            @* Optional: show validation message from data annotations *@
            <span asp-validation-for="Username" class="text-danger small"></span>
        </div>
    </div>

    @*
      CHAT UI (only visible after a valid POST)
      - Razor toggles visibility with Model.Joined
      - The message list and input are plain HTML; chat.js wires up SignalR
      - No form submit here; the Send button triggers JS only
    *@
    <div id="chatCard" class="card mx-auto @(Model.Joined ? "" : "d-none") chat-card">
        <div class="card-header">Global chat</div>

        @* Scrollable message list; height controlled by CSS class *@
        <ul id="messagesList" class="list-group list-group-flush messages-list"></ul>

        <div class="card-body">
            <div class="input-group">
                <input id="messageInput"
                       class="form-control"
                       placeholder="Type a message"
                       autocomplete="off"
                       @(Model.Joined ? "" : "disabled") />

                @* type="button" prevents accidental form POSTs *@
                <button id="sendBtn"
                        type="button"
                        class="btn btn-success"
                        @(Model.Joined ? "" : "disabled")>
                    Chat
                </button>
            </div>
        </div>
    </div>

    @* Status area for connection/errors *@
    <div id="status" class="mt-3"></div>
</div>
@* 
  Scripts section is rendered at the bottom of _Layout.cshtml.
  Order matters: load SignalR browser client first, then chat.js.
*@
@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.js"></script>
    <script src="~/js/chat.js"></script>
}
